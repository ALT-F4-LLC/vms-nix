import.git "grafana_cloud" {
  repository     = "https://github.com/grafana/alloy-modules.git"
  path           = "modules/cloud/grafana/cloud/module.alloy"
  revision       = "main"
  pull_frequency = "0s"
}

grafana_cloud.stack "receivers" {
  stack_name = env("GRAFANA_CLOUD_STACK")
  token      = env("GRAFANA_CLOUD_TOKEN")
}

prometheus.receive_http "forward" {
  http {
    listen_address = "0.0.0.0"
    listen_port = 9090
  }
  forward_to = [
    grafana_cloud.stack.receivers.metrics,
  ]
}

// Set instance label to the hostname
prometheus.relabel "instance" {
  forward_to = [grafana_cloud.stack.receivers.metrics]
  rule {
    target_label = "instance"
    replacement  = local.file.hostname.content
  }
}

prometheus.exporter.unix "node" {
}

prometheus.scrape "linux_node" {
  targets = prometheus.exporter.unix.node.targets
  forward_to = [prometheus.relabel.instance.receiver]
}

prometheus.exporter.self "agent" {
}

prometheus.scrape "agent" {
  targets = prometheus.exporter.self.agent.targets
  forward_to = [prometheus.relabel.instance.receiver]
}

loki.source.api "receive" {
    http {
        listen_address = "0.0.0.0"
        listen_port = 3100
    }
    forward_to = [
      grafana_cloud.stack.receivers.logs,
    ]
}

loki.source.journal "read" {
  forward_to = [
    grafana_cloud.stack.receivers.logs,
  ]
  relabel_rules = concat(
    loki.relabel.journal.rules,
    loki.relabel.instance.rules,
  )
  labels = {
    "job" = "integrations/node_exporter",
  }
}

otelcol.exporter.prometheus "to_prometheus" {
  forward_to = [grafana_cloud.stack.receivers.metrics]
}

otelcol.exporter.loki "to_loki" {
  forward_to = [
    grafana_cloud.stack.receivers.logs,
  ]
}

otelcol.receiver.otlp "default" {
  grpc {}
  http {}
  output {
    metrics = [otelcol.exporter.prometheus.to_prometheus.input]
    logs = [otelcol.exporter.loki.to_loki.input]
    traces = [grafana_cloud.stack.receivers.traces]
  }
}

// vim:ft=hcl
