// We ship everything over OTLP
otelcol.exporter.otlp "gc_fwd" {
  client {
    endpoint = "gc-fwd.altf4.internal:4317"
    tls {
      insecure             = true
    }
  }
}

// Convert Prometheus data for OTLP
otelcol.receiver.prometheus "default" {
  output {
    metrics = [otelcol.exporter.otlp.gc_fwd.input]
  }
}

// Convert OTLP data for Prometheus
otelcol.exporter.prometheus "default" {
  forward_to = [prometheus.relabel.instance.receiver]
}

// Convert Loki data for OTLP
otelcol.receiver.loki "default" {
  output {
    logs = [otelcol.exporter.otlp.gc_fwd.input]
  }
}

// Fetch journal entries
loki.source.journal "journal" {
  forward_to    = [otelcol.receiver.loki.default.receiver]
  relabel_rules = loki.relabel.omnibus.rules
  labels        = {component = "loki.source.journal"}
}

// Set instance label to the hostname
prometheus.relabel "instance" {
  forward_to = [otelcol.receiver.prometheus.default.receiver]
  rule {
    target_label = "instance"
    replacement  = trim_space(local.file.hostname.content)
  }
}

// Export system metrics
prometheus.exporter.unix "host" {}

// Scrape system metrics
prometheus.scrape "host" {
  targets    = prometheus.exporter.unix.host.targets
  forward_to = [prometheus.relabel.instance.receiver]
}

// Export agent metrics
prometheus.exporter.self "agent" {}

// Scrape agent metrics
prometheus.scrape "agent" {
  targets    = prometheus.exporter.self.agent.targets
  forward_to = [prometheus.relabel.instance.receiver]
}

// vim:ft=hcl
